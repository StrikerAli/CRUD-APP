@page "/todolist"
@rendermode InteractiveServer
@using CrudApp.Models
@inject ToDoService ToDoService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<h3>To-Do List</h3>

<!-- Add New Item Form -->
<EditForm EditContext="@editContext" OnSubmit="@AddItem" FormName="Name">
    <div class="form-group" style="margin-bottom: 1rem;">
        <InputText @bind-Value="newItem!.Title" placeholder="Enter a new to-do item" style="margin-bottom: 0.5rem;" />
        <button type="submit" class="btn btn-primary">Add</button>
    </div>
</EditForm>

<!-- To-Do List -->
<ul style="padding-left: 0;">
    @foreach (var item in toDoItems)
    {
        <li style="margin-bottom: 1rem; list-style-type: none; margin-left: 0.5rem;">
            <div style="display: flex; align-items: center;">
                <input type="checkbox" checked="@item.IsCompleted" @onchange="(e) => UpdateItem(item, e)" />
                <span style="flex-grow: 1; margin-left: 0.5rem;">@item.Title</span>
                <button @onclick="() => ConfirmDeleteItem(item)" class="btn btn-danger">Delete</button>
            </div>
        </li>
    }
</ul>

@code {
    private EditContext? editContext;
    [SupplyParameterFromForm]
    public ToDoItem? newItem { get; set; }
    private List<ToDoItem> toDoItems = new();

    protected override async Task OnInitializedAsync()
    {
        newItem ??= new();
        editContext = new EditContext(newItem);
        await RefreshToDoItems();
    }

    private async Task RefreshToDoItems()
    {
        toDoItems = await ToDoService.GetToDoItemsAsync();
    }

    private async Task AddItem()
    {
        if (string.IsNullOrWhiteSpace(newItem!.Title))
        {
            await JSRuntime.InvokeVoidAsync("showNotification", "Enter the name of To-Do Item");
            return;
        }

        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirmDialog", "Are you sure you want to add this item?");
        if (!confirmed)
        {
            return;
        }

        await ToDoService.AddToDoItemAsync(newItem);
        newItem = new ToDoItem(); // Clear the input field by resetting newItem
        await RefreshToDoItems(); // Refresh the list after adding
        await JSRuntime.InvokeVoidAsync("showNotification", "Item added successfully!");
    }

    private async Task UpdateItem(ToDoItem item, ChangeEventArgs e)
    {
        item.IsCompleted = (bool)e.Value;
        await ToDoService.UpdateToDoItemAsync(item);
        await RefreshToDoItems(); // Refresh the list after updating
        await JSRuntime.InvokeVoidAsync("showNotification", "Item updated successfully!");
    }

    private async Task ConfirmDeleteItem(ToDoItem item)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirmDialog", "Are you sure you want to delete this item?");
        if (confirmed)
        {
            await DeleteItem(item);
        }
    }

    private async Task DeleteItem(ToDoItem item)
    {
        await ToDoService.DeleteToDoItemAsync(item);
        await RefreshToDoItems(); // Refresh the list after deleting
        await JSRuntime.InvokeVoidAsync("showNotification", "Item deleted successfully!");
    }
}
